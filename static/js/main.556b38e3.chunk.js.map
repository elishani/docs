{"version":3,"sources":["components/DocsNavbar.js","pages/HomePage.js","pages/LoginPage.js","pages/DocsPage.js","App.js","serviceWorker.js","index.js"],"names":["DocsNavbar","props","activeUser","this","docsLink","Nav","Link","href","signupLink","loginLink","logoutLink","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","id","className","Component","HomePage","React","LoginPage","clasName","to","Form","Group","controlId","Label","Control","type","placeholder","Button","vriant","block","DocsPage","App","state","allUsers","jsonUsers","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"udAmCeA,E,YA/BX,WAAYC,GAAO,qEACTA,I,sEAGA,IACEC,EAAeC,KAAKF,MAApBC,WAEFE,EAAWF,EAAa,kBAACG,EAAA,EAAIC,KAAL,CAAUC,KAAK,UAAf,QAA0C,KAClEC,EAAcN,EAA2D,KAA9C,kBAACG,EAAA,EAAIC,KAAL,CAAUC,KAAK,YAAf,UAC3BE,EAAaP,EAAyD,KAA5C,kBAACG,EAAA,EAAIC,KAAL,CAAUC,KAAK,WAAf,SAC1BG,EAAaR,EAAa,kBAACG,EAAA,EAAIC,KAAL,eAA8B,KAE9D,OACI,kBAACK,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MAC1B,kBAACF,EAAA,EAAOG,MAAR,CAAcP,KAAK,MAAnB,qBACA,kBAACI,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,oBAChB,kBAACb,EAAA,EAAD,CAAKc,UAAU,WACVf,GAEL,kBAACC,EAAA,EAAD,CAAKc,UAAU,WACVX,EACAC,EACAC,S,GAxBIU,aCiBVC,E,YAhBX,WAAYpB,GAAO,qEACTA,I,sEAGA,IACEC,EAAeC,KAAKF,MAApBC,WACR,OACI,6BACI,kBAAC,EAAD,CAAYA,WAAYA,IACxB,6C,GAVOoB,IAAMF,W,gCCiCdG,E,iLA5BP,OACI,6BACI,yCACA,yBAAKC,SAAS,WACV,yBAAKL,UAAU,UACX,0DACA,iCAAM,kBAAC,IAAD,CAAMM,GAAG,WAAT,yBACN,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBAClB,kBAACF,EAAA,EAAKG,MAAN,uBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,QAAQC,YAAY,iBAE3C,kBAACN,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBAClB,kBAACF,EAAA,EAAKG,MAAN,gBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,WAAWC,YAAY,cAE9C,kBAACC,EAAA,EAAD,CAAQC,OAAO,UAAUH,KAAK,SAASI,OAAK,GAA5C,iB,GAnBJb,IAAMF,WCOfgB,E,iLAPb,OACE,4C,GAJmBd,IAAMF,W,wBCuCdiB,E,YA/Bb,WAAYpC,GAAO,IAAD,8BAChB,4CAAMA,KAEDqC,MAAQ,CACXpC,WAAY,KACZqC,SAAUC,GALI,E,sEASR,IAAD,EACwBrC,KAAKmC,MAA9BpC,EADC,EACDA,WAAYqC,EADX,EACWA,SAElB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,CAAUxC,WAAYA,KAExB,kBAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,UAChB,kBAAC,EAAD,CAAWH,SAAUA,KAEvB,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,SAChB,kBAAC,EAAD,a,GAvBMpB,IAAMF,WCGJuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.556b38e3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Navbar, Nav } from 'react-bootstrap'\r\n\r\nclass DocsNavbar extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const { activeUser } = this.props;\r\n\r\n        const docsLink = activeUser ? <Nav.Link href=\"#/docs\">Docs</Nav.Link> : null;\r\n        const signupLink = !activeUser ? <Nav.Link href=\"#/signup\">Singup</Nav.Link> : null;\r\n        const loginLink = !activeUser ? <Nav.Link href=\"#/login\">Login</Nav.Link> : null;\r\n        const logoutLink = activeUser ? <Nav.Link>Logout</Nav.Link> : null;\r\n\r\n        return (\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand href=\"#/\">Documents Cluster</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    {docsLink}\r\n                </Nav>\r\n                <Nav className=\"ml-auto\">\r\n                    {signupLink}\r\n                    {loginLink}\r\n                    {logoutLink}  \r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DocsNavbar;","import React from 'react';\r\nimport DocsNavbar from \"../components/DocsNavbar\";\r\n\r\nclass HomePage extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const { activeUser } = this.props;\r\n        return (\r\n            <div>\r\n                <DocsNavbar activeUser={activeUser} />\r\n                <h1>HomePage</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\r\nimport './LoginPage.css';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass LoginPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>LoginPage</h1>\r\n                <div clasName=\"p-login\">\r\n                    <div className=\"p-main\">\r\n                        <h1>Login to documents storage</h1>\r\n                        <p>or <Link to=\"/signup\">Create a new account</Link></p>\r\n                        <Form>\r\n                            <Form.Group controlId=\"frombsicaEmail\">\r\n                                <Form.Label>Email adderess</Form.Label>\r\n                                <Form.Control type=\"email\" placeholder=\"Enter Email\" />\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"frombsicaPassword\">\r\n                                <Form.Label>Pssword</Form.Label>\r\n                                <Form.Control type=\"Password\" placeholder=\"Password\" />\r\n                            </Form.Group>\r\n                            <Button vriant=\"success\" type=\"button\" block>\r\n                                Login\r\n                            </Button>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default LoginPage;","import React from 'react';\r\n\r\nclass DocsPage extends React.Component{\r\n\r\nrender() {\r\n  return (\r\n    <h1>DocsPage</h1>\r\n  );\r\n  }\r\n\r\n}\r\n\r\nexport default DocsPage;","import React from 'react';\r\nimport HomePage from './pages/HomePage';\r\nimport LoginPage from './pages/LoginPage';\r\nimport DocsPage from './pages/DocsPage';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport jsonUsers from './data/users'\r\n\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\r\n\r\nclass App extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      activeUser: null,\r\n      allUsers: jsonUsers\r\n    }\r\n  }\r\n\r\n  render() {\r\n  const { activeUser, allUsers } = this.state;\r\n\r\n    return (\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <HomePage activeUser={activeUser} />\r\n          </Route>\r\n          <Route exact path=\"/login\">\r\n            <LoginPage allUsers={allUsers}/>\r\n          </Route>\r\n          <Route exact path=\"/docs\">\r\n            <DocsPage />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}